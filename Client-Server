import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Client extends JFrame{
	
	private JTextField userText;
	private JTextArea chatWindow;
	private ObjectOutputStream output; //opposite from the host computer
	private ObjectInputStream input;
	private String message = "";
	private String serverIP; //IP address of person you're talking to
	private Socket connection;
	
	//constructor
	public Client(String host){
		super("Client IM");
		serverIP = host;
		userText = new JTextField();
		userText.setEditable(false);
		userText.addActionListener(
				new ActionListener(){
					public void actionPerformed(ActionEvent event){
						sendMessage(event.getActionCommand());
						userText.setText("");
					}
				}
			);
		add(userText, BorderLayout.NORTH);
		chatWindow = new JTextArea();
		add(new JScrollPane(chatWindow), BorderLayout.CENTER);
		setSize(500, 250);
		setVisible(true);
	}
	
	//connect to server
	
	public void startRunning(){
		try{
			connectToServer();
			setUpStreams();
			whileChatting();
		}catch(EOFException eofException){
			showMessage("\n Oops! Client terminated the connection");
		}catch(IOException ioException){
			ioException.printStackTrace();
		}finally{
			closeUneeded();
		}
	}
	
	//connect to server
	private void connectToServer()throws IOException{
		showMessage("Trying to connect...\n");
		connection = new Socket(InetAddress.getByName(serverIP), 6789);
		showMessage("Connected to: " + connection.getInetAddress().getHostName());
	}
	
	//set up streams to send/receive messages
	
	private void setUpStreams() throws IOException{
		output = new ObjectOutputStream(connection.getOutputStream());
		output.flush();
		input = new ObjectInputStream(connection.getInputStream());
		showMessage("\n Streams are now conencted \n");
	}
	
	//while chatting with server
	
	private void whileChatting() throws IOException{
		ableToType(true);
		do{
			try{
				message = (String) input.readObject(); //will read whatever is sent and store it in message
				showMessage("\n" + message);
			}catch(ClassNotFoundException classnotFoundException){
				showMessage("\n Invalid object type");
			}
		}while(!message.equals("SERVER-END"));
	}
	
	//close down streams and sockets
	
	private void closeUneeded(){
		showMessage("\n Closing everything down");
		ableToType(false);
		try{
			output.close();
			input.close();
			connection.close();
		}catch(IOException ioException){
			ioException.printStackTrace();
		}
	}
	
	//send messages to server from the client
	
	private void sendMessage(String message){
		try{
			output.writeObject("CLIENT - " + message);
			output.flush();
			showMessage("\n CLIENT - " + message);
		}catch(IOException ioException){
			chatWindow.append("\n Something is wrong while sending the messgae");
		}
	}
	
	//change/update chatWindow
	
	private void showMessage(final String message){
		SwingUtilities.invokeLater(
				new Runnable(){
					public void run(){
						chatWindow.append(message);
					}
				}
			);
	}
	
	//allows user to type in the text box
	
	private void ableToType(final boolean trueOrFalse){
		SwingUtilities.invokeLater(
				new Runnable(){
					public void run(){
						userText.setEditable(trueOrFalse);
					}
				}
			);
	}
	
}








